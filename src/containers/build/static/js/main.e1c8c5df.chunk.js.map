{"version":3,"sources":["containers/IntroPage/IntroPage.module.css","components/Feedback/Feedback.module.css","containers/Header/Header.module.css","components/GameRules/GameRules.module.css","containers/Sudoku/Sudoku.module.css","components/Cell/Cell.module.css","components/CellInput/CellInput.module.css","UI/RadioGroup/RadioGroup.module.css","UI/RadioGroup/RadioButton/RadioButton.module.css","components/AuthorInfo/AuthorInfo.module.css","containers/Sudoku/SudokuBoxes/SudokuBoxes.module.css","HOC/Layout/Layout.module.css","components/OptionSIde/OptionSide.module.css","UI/Button/Button.module.css","containers/Sudoku/SudokuBoxes/SudokuBox/SudokuBox.module.css","containers/CellInputs/CellInputs.module.css","HOC/SudokuBoardContainer/SudokuBoardContainer.module.css","containers/Controls/Controls.module.css","components/Cell/Cell.js","store/actions/actionTypes.js","store/actions/sudokuActions.js","store/actions/appUIactions.js","containers/Sudoku/SudokuBoxes/SudokuBox/SudokuBox.js","containers/Sudoku/SudokuBoxes/SudokuBoxes.js","helpers/helpers.js","components/Feedback/Feedback.js","components/GameRules/GameRules.js","containers/Sudoku/Sudoku.js","components/CellInput/CellInput.js","containers/CellInputs/CellInputs.js","helpers/appUIreducerHelper.js","store/reducers/appUIreducer.js","helpers/sudokuReducerHelper.js","store/reducers/sudokuReducer.js","assets/video.mp4","HOC/Layout/Layout.js","HOC/SudokuBoardContainer/SudokuBoardContainer.js","UI/Button/Button.js","components/OptionSIde/OptionSide.js","UI/RadioGroup/RadioButton/RadioButton.js","UI/RadioGroup/RadioGroup.js","containers/IntroPage/IntroPage.js","containers/Header/Header.js","containers/Controls/Controls.js","components/AuthorInfo/AuthorInfo.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Cell","props","cellClasses","classes","tabIndex","isDefault","push","isInvalid","onFocus","cellFocusHandler","row","column","className","join","value","TOGGLE_INTRO_COMPONENT","TOGLE_GAME_RULES","SET_ACTIVE_CELL_STATE","SET_SUDOKU_STATE","SET_INVALID_CELLS","SET_INVALID_ROWS","SET_INVALID_COLUMNS","SET_PUZZLE_AND_SOLVED_PUZZLE","SOLVE_PUZZLE","SUDOKU_IS_SOLVED","SET_INVALID_BOXES_AND_NUMBERS","SOLVE_SUDOKU_FOR_USER","SET_GAME_MODE","INIT_USER_INPUT_SUDOKU_TO_SOLVE","SET_DIFFICULTY","CLEAR_ACTIVE_CELL","setPuzzleAndSolvedPuzzle","type","actions","initUserInputSUdokuToSolve","setGameMode","mode","payload","toggleIntroComponent","clearActiveCell","SudokuBox","connect","state","sudokuState","sudoku","isSudokuSolved","dispatch","setInvalidBoxesAndNumbers","invalidBoxesArr","invalidNumbersArr","sudokuActions","useEffect","detectInvalidBox","boxesWithRepeatedNumbers","invalidNumbersInBox","s","box1","slice","box2","box3","box4","box5","box6","box7","box8","box9","boxesWithRepeatedNumbersInner","forEach","el","idx","elArrWithoutNull","i","duplicates","arrayDuplicated","includes","length","content","Array","fill","map","styleClasses","MODE_PLAY","MODE_SOLVE","EASY_PUZZLE","MEDIUM_PUZZLE","HARD_PUZZLE","Feedback","unmountTimeout","setTimeout","unmountMe","clearTimeout","show","message","GameRules","rel","target","href","showGameRules","appUI","activeCell","isAnyCellJustUpdated","invalidRows","invalidRowsArr","invalidColumns","invalidColumnsArr","invalidBoxesNumbersArr","allValuesAreDefault","defaultCellCoordinates","doesUserInputtedPuzzleHaveError","isUserInputtedPuzzleSolvable","isUserInputtedPuzzleSolved","setActivateCellState","appUIactions","setInvalidNumbers","setInvalidRows","setInvalidColumns","setSudokuStateToSolved","checkForRepeatedNumbersInRowsAndColumns","setShowFeedbackComp","useState","showFeedbackComp","repeatedNumbersInRows","repeatedNumbersArr","repeatedNumbersRows","index","allNumberCounter","val","count","cell","currentIndex","findIndex","newCounterEl","repeatNums","repeatedNumbersObj","filter","num","repeatedNum","concat","generateRepeatedNumbersInRows","repeatedNumbersInColumns","repeatedNumbersColumns","outer_el","outer_i","mainArr","columnFromRow","_","inner_i","newEl","generateRepeatedNumbersInColumns","repeatedNumbers","Set","checkIfSudokuIsSolved","invalidNumbers","isAllCellsCompletelyFilled","flat","isThereNoInvalidRow","Boolean","isThereNoInvalidColumn","isThereNoInvalidNumber","Math","floor","boxNumber","coord","helpers","isInvalidInRowOrColumn","isInvalidInBox","some","propTypes","PropTypes","bool","object","array","any","func","CellInput","cellInputClasses","isClear","onClick","cellInputClickedHandler","availableInputs","setSudokuState","keyDownHandler","event","onKeyDownHandler","document","body","addEventListener","removeEventListener","key","setActiveCellState","action","showIntroComponent","toggleGameRules","store","isAnyCellActive","reducer","newStateSetActiveCellState","appUIreducerHelper","newStateClearActiveCell","newStateToggleIntroComponent","newStateToggleGameRules","currentMode","difficulty","setDifficulty","generatedPuzzleAndSolvedPuzzle","puzzle","makepuzzle","correctPuzzle","correctSolvedPuzzle","solvepuzzle","emptyIndices","numberOfBoxesToRemainEmpty","correctPuzzleWithDifficulty","emptyIndicesInitialLength","counter","emptyIndicesLength","rnd","random","currElIndex","splice","solvedPuzzle","generatePuzzleAndSolvedPuzzle","generatedPuzzle","generatedSolvedPuzzle","defaultCellCoords","outer_idx","outer_arr","inner_el","inner_idx","inner_arr","solvedState","solvePuzzle","allCellCoords","newState","newRow","setInvalidCells","newInvalidNumbers","sudokuIsSolved","setInvalidBoesAndNumbers","invalidBoxes","solveSudokuForUser","isInvalidNumbersArrEmpty","isInvalidRowsArrEmpty","isInvalidColumnsArrEmpty","isInvalidBoxesArrEmpty","isInvalidBoxesNumbersArrEmpty","noErrors","attemptedSolvedState","userPuzzle","puzzleSetForSolving","solvePuzzleFromUserInputtedPuzzle","console","log","allCellCoordsArr","dafaultState","newStateSetNewGame","sudokuReducerHelper","newStateSetDifficulty","newStateSetPuzzleAndSolvedPuzzle","newStateSolvePuzzle","newStateSetSudokuState","newStateSetInvalidCells","newStateSetInvalidRows","newStateSetInvalidColumns","newStateSudokuIsSolved","newStateSetInvalidBoxesAndNumbers","newStateSolveSudokuForUser","newStateInitUserInputSudokuToSolve","Layout","autoPlay","loop","muted","src","bgVideoMp4","children","SudokuBoardContainer","Button","inlineBtn","clicked","disabled","OptionSide","heading","details","btnDisabledCondition","btnCTA","btnLabel","RadioButton","htmlFor","id","label","name","onChange","checked","RadioGroup","radioBtns","radioGroupTitle","radioLabel","radioAction","radioGroupName","shouldShowIntroComponent","setBoardToEmpty","difficultyBtns","isThereSolvedState","appUIActions","solvePuzzleForUser","actionBasedOnMode","controls","AuthorInfo","createStore","combineReducers","appUIreducer","sudokuReducer","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.e1c8c5df.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"IntroPage\":\"IntroPage_IntroPage__1XiCt\",\"Hidden\":\"IntroPage_Hidden__2aKkK\",\"Heading\":\"IntroPage_Heading__xxID0\",\"HeadingTitle\":\"IntroPage_HeadingTitle__eqg0n\",\"glowOnHover\":\"IntroPage_glowOnHover__755ML\",\"HeadingInfo\":\"IntroPage_HeadingInfo__30r_x\",\"Options\":\"IntroPage_Options__3i2na\",\"OptionSide\":\"IntroPage_OptionSide__zUvN8\",\"OptionDetails\":\"IntroPage_OptionDetails__3kRYM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Feedback\":\"Feedback_Feedback__OO24w\",\"Success\":\"Feedback_Success__39QXJ\",\"Danger\":\"Feedback_Danger__Fd_OO\",\"Visible\":\"Feedback_Visible__3EXhu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Header\":\"Header_Header__1xrSh\",\"Row\":\"Header_Row__1P6ty\",\"ModeDetails\":\"Header_ModeDetails__3d3To\",\"GlowOnHover\":\"Header_GlowOnHover__1XX1Q\",\"glowOnHover\":\"Header_glowOnHover__28GA3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"GameRules\":\"GameRules_GameRules__dPtGx\",\"Visible\":\"GameRules_Visible__1dgDD\",\"List\":\"GameRules_List__3y4BJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Sudoku\":\"Sudoku_Sudoku__3ZujJ\",\"Solved\":\"Sudoku_Solved__HnUhn\",\"Content\":\"Sudoku_Content__35bsb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Cell\":\"Cell_Cell__JGzUO\",\"Default\":\"Cell_Default__15Zir\",\"Invalid\":\"Cell_Invalid__2ljSu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CellInput\":\"CellInput_CellInput__3Y550\",\"Value\":\"CellInput_Value__1mStn\",\"ClearCell\":\"CellInput_ClearCell__HS-td\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"RadioGroup\":\"RadioGroup_RadioGroup__mY_Rn\",\"BtnContainer\":\"RadioGroup_BtnContainer__1eAKW\",\"RadioGroupTitle\":\"RadioGroup_RadioGroupTitle__18VpK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"RadioButton\":\"RadioButton_RadioButton__2HdoT\",\"RadioInput\":\"RadioButton_RadioInput__16C2w\",\"RadioLabel\":\"RadioButton_RadioLabel__4mB_T\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"AuthorInfo\":\"AuthorInfo_AuthorInfo__3R_V7\",\"AuthorText\":\"AuthorInfo_AuthorText__f5MiQ\",\"AuthorLink\":\"AuthorInfo_AuthorLink__qE4mb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"SudokuBoxes\":\"SudokuBoxes_SudokuBoxes__2tKkY\",\"Solved\":\"SudokuBoxes_Solved__1suF7\",\"GridBox\":\"SudokuBoxes_GridBox__2WjD4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Layout\":\"Layout_Layout__2kcOK\",\"BgVideo\":\"Layout_BgVideo__2QN5B\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"OptionSide\":\"OptionSide_OptionSide__bJdEU\",\"OptionDetails\":\"OptionSide_OptionDetails__-zkR2\",\"Options\":\"OptionSide_Options__1ltjW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button_Button__3h9Fb\",\"Inline\":\"Button_Inline__MtcvC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"SudokuBox\":\"SudokuBox_SudokuBox__3I-8r\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CellInputs\":\"CellInputs_CellInputs__2R0t9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"SudokuBoardContainer\":\"SudokuBoardContainer_SudokuBoardContainer__3xpWF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Controls\":\"Controls_Controls__qf-mV\"};","import React from \"react\";\nimport * as classes from \"./Cell.module.css\";\n\nimport PropTypes from \"prop-types\";\n\nconst Cell = (props) => {\n  const cellClasses = [classes.Cell];\n  let tabIndex = \"0\";\n\n  if (props.isDefault) {\n    cellClasses.push(classes.Default);\n    tabIndex = \"\";\n  }\n  if (props.isInvalid) cellClasses.push(classes.Invalid);\n\n  const onFocusHandler = () => {\n    props.cellFocusHandler(props.row, props.column);\n  };\n\n  return (\n    <div\n      tabIndex={tabIndex}\n      onFocus={onFocusHandler}\n      className={cellClasses.join(\" \")}\n    >\n      {props.value}\n    </div>\n  );\n};\nexport default Cell;\n\nCell.propTypes = {\n  isDefault: PropTypes.bool,\n  isInvalid: PropTypes.bool,\n  row: PropTypes.number,\n  column: PropTypes.number,\n  column: PropTypes.number,\n};\n","// APP UI actions\nexport const ACTIVATE_CELL = \"ACTIVATE_CELL\";\nexport const TOGGLE_INTRO_COMPONENT = \"TOGGLE_INTRO_COMPONENT\";\nexport const TOGLE_GAME_RULES = \"TOGLE_GAME_RULES\";\n\n// Sudoku game actions\nexport const SET_ACTIVE_CELL_STATE = \"SET_ACTIVE_CELL_STATE\";\nexport const SET_SUDOKU_STATE = \"SET_SUDOKU_STATE\";\nexport const SET_INVALID_CELLS = \"SET_INVALID_CELLS\";\nexport const SET_INVALID_ROWS = \"SET_INVALID_ROWS\";\nexport const SET_INVALID_COLUMNS = \"SET_INVALID_COLUMNS\";\nexport const SET_PUZZLE_AND_SOLVED_PUZZLE = \"SET_PUZZLE_AND_SOLVED_PUZZLE\";\nexport const SOLVE_PUZZLE = \"SOLVE_PUZZLE\";\nexport const SUDOKU_IS_SOLVED = \" SUDOKU_IS_SOLVED\";\nexport const SET_INVALID_BOXES_AND_NUMBERS = \"SET_INVALID_BOXES_AND_NUMBERS\";\nexport const SOLVE_SUDOKU_FOR_USER = \"SOLVE_SUDOKU_FOR_USER\";\nexport const SET_GAME_MODE = \"SET_GAME_MODE\";\nexport const INIT_USER_INPUT_SUDOKU_TO_SOLVE =\n  \"INIT_USER_INPUT_SUDOKU_TO_SOLVE\";\nexport const SET_DIFFICULTY = \"SET_DIFFICULTY\";\nexport const CLEAR_ACTIVE_CELL = \"CLEAR_ACTIVE_CELL\";\n","import * as actions from \"../actions/actionTypes\";\n\nexport const setActivateCell = (payload) => {\n  return {\n    type: actions.ACTIVATE_CELL,\n    payload: payload,\n  };\n};\n\nexport const setSudokuState = (row, column, value) => {\n  return {\n    type: actions.SET_SUDOKU_STATE,\n    payload: { row: row, column: column, value: value },\n  };\n};\n\nexport const setInvalidCells = (invalidNumbersArr) => {\n  return {\n    type: actions.SET_INVALID_CELLS,\n    payload: {\n      invalidNumbersArr: invalidNumbersArr,\n    },\n  };\n};\n\nexport const setInvalidRows = (invalidRows) => {\n  return {\n    type: actions.SET_INVALID_ROWS,\n    payload: {\n      invalidRows: invalidRows,\n    },\n  };\n};\n\nexport const setInvalidColumns = (invalidColumns) => {\n  return {\n    type: actions.SET_INVALID_COLUMNS,\n    payload: {\n      invalidColumns: invalidColumns,\n    },\n  };\n};\n\nexport const setPuzzleAndSolvedPuzzle = () => {\n  return {\n    type: actions.SET_PUZZLE_AND_SOLVED_PUZZLE,\n  };\n};\n\nexport const solvePuzzle = () => {\n  return {\n    type: actions.SOLVE_PUZZLE,\n  };\n};\n\nexport const sudokuIsSolved = () => {\n  return {\n    type: actions.SUDOKU_IS_SOLVED,\n  };\n};\n\nexport const setInvalidBoxesAndNumbers = (\n  invalidBoxesArr,\n  invalidNumbersArr\n) => {\n  return {\n    type: actions.SET_INVALID_BOXES_AND_NUMBERS,\n    payload: {\n      invalidBoxesArr: invalidBoxesArr,\n      invalidNumbersArr: invalidNumbersArr,\n    },\n  };\n};\n\nexport const solvePuzzleForUser = () => {\n  return {\n    type: actions.SOLVE_SUDOKU_FOR_USER,\n  };\n};\n\nexport const initUserInputSUdokuToSolve = () => {\n  return {\n    type: actions.INIT_USER_INPUT_SUDOKU_TO_SOLVE,\n  };\n};\n\nexport const setGameMode = (mode) => {\n  return {\n    type: actions.SET_GAME_MODE,\n    payload: {\n      mode: mode,\n    },\n  };\n};\n\nexport const setDifficulty = (difficulty) => {\n  return {\n    type: actions.SET_DIFFICULTY,\n    payload: {\n      difficulty: difficulty,\n    },\n  };\n};\n","import * as actions from \"./actionTypes\";\n\nexport const setACtiveCellState = (row, column) => {\n  return {\n    type: actions.SET_ACTIVE_CELL_STATE,\n    payload: { row: row, column: column },\n  };\n};\n\nexport const toggleIntroComponent = () => {\n  return {\n    type: actions.TOGGLE_INTRO_COMPONENT,\n  };\n};\n\nexport const clearActiveCell = () => {\n  return {\n    type: actions.CLEAR_ACTIVE_CELL,\n  };\n};\n\nexport const toggleGameRules = () => {\n  return {\n    type: actions.TOGLE_GAME_RULES,\n  };\n};\n","import React from \"react\";\nimport * as classes from \"./SudokuBox.module.css\";\n\nconst SudokuBox = () => {\n  return <div className={classes.SudokuBox}></div>;\n};\nexport default SudokuBox;\n","import React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport SudokuBox from \"./SudokuBox/SudokuBox\";\nimport arrayDuplicated from \"array-duplicated\";\nimport * as classes from \"./SudokuBoxes.module.css\";\nimport * as sudokuActions from \"../../../store/actions/sudokuActions\";\n\nimport PropTypes from \"prop-types\";\n\nconst SudokuBoxes = (props) => {\n  useEffect(() => {\n    detectInvalidBox();\n  }, [props.sudokuState]);\n\n  let boxesWithRepeatedNumbers = [];\n  const invalidNumbersInBox = [];\n\n  const detectInvalidBox = () => {\n    const s = props.sudokuState;\n    const box1 = [\n      ...s[0].slice(0, 3),\n      ...s[1].slice(0, 3),\n      ...s[2].slice(0, 3),\n    ];\n    const box2 = [\n      ...s[0].slice(3, 6),\n      ...s[1].slice(3, 6),\n      ...s[2].slice(3, 6),\n    ];\n    const box3 = [\n      ...s[0].slice(6, 9),\n      ...s[1].slice(6, 9),\n      ...s[2].slice(6, 9),\n    ];\n    const box4 = [\n      ...s[3].slice(0, 3),\n      ...s[4].slice(0, 3),\n      ...s[5].slice(0, 3),\n    ];\n    const box5 = [\n      ...s[3].slice(3, 6),\n      ...s[4].slice(3, 6),\n      ...s[5].slice(3, 6),\n    ];\n    const box6 = [\n      ...s[3].slice(6, 9),\n      ...s[4].slice(6, 9),\n      ...s[5].slice(6, 9),\n    ];\n    const box7 = [\n      ...s[6].slice(0, 3),\n      ...s[7].slice(0, 3),\n      ...s[8].slice(0, 3),\n    ];\n    const box8 = [\n      ...s[6].slice(3, 6),\n      ...s[7].slice(3, 6),\n      ...s[8].slice(3, 6),\n    ];\n    const box9 = [\n      ...s[6].slice(6, 9),\n      ...s[7].slice(6, 9),\n      ...s[8].slice(6, 9),\n    ];\n    const boxesWithRepeatedNumbersInner = [];\n    const boxesArr = [box1, box2, box3, box4, box5, box6, box7, box8, box9];\n    boxesArr.forEach((el, idx) => {\n      const elArr = el;\n      const elArrWithoutNull = [];\n\n      elArr.forEach((el, i) => {\n        if (!(el === null)) {\n          elArrWithoutNull.push(el);\n        }\n      });\n\n      const duplicates = arrayDuplicated(elArrWithoutNull);\n      duplicates.forEach((el, idx) => {\n        if (el && !invalidNumbersInBox.includes(el))\n          invalidNumbersInBox.push(el);\n      });\n\n      if (duplicates.length > 0) {\n        boxesWithRepeatedNumbersInner.push(idx + 1);\n      }\n    });\n    boxesWithRepeatedNumbers = [...boxesWithRepeatedNumbersInner];\n    props.setInvalidBoxesAndNumbers(\n      boxesWithRepeatedNumbers,\n      invalidNumbersInBox\n    );\n  };\n\n  const content = new Array(9)\n    .fill(\"0\")\n    .map((el, idx) => <SudokuBox key={idx} />);\n\n  const styleClasses = [classes.SudokuBoxes];\n  if (props.isSudokuSolved) {\n    styleClasses.push(classes.Solved);\n  }\n\n  return <div className={styleClasses.join(\" \")}>{content}</div>;\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    sudokuState: state.sudoku.sudokuState,\n    isSudokuSolved: state.sudoku.isSudokuSolved,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    setInvalidBoxesAndNumbers: (invalidBoxesArr, invalidNumbersArr) =>\n      dispatch(\n        sudokuActions.setInvalidBoxesAndNumbers(\n          invalidBoxesArr,\n          invalidNumbersArr\n        )\n      ),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SudokuBoxes);\n\nSudokuBoxes.propTypes = {\n  sudokuState: PropTypes.array,\n  isSudokuSolved: PropTypes.bool,\n  setInvalidBoxesAndNumbers: PropTypes.func,\n};\n","import { makepuzzle, solvepuzzle, ratepuzzle } from \"sudoku\";\n\nexport const MODE_PLAY = \"MODE_PLAY\";\nexport const MODE_SOLVE = \"MODE_SOLVE\";\n\nexport const EASY_PUZZLE = \"EASY_PUZZLE\";\nexport const MEDIUM_PUZZLE = \"MEDIUM_PUZZLE\";\nexport const HARD_PUZZLE = \"HARD_PUZZLE\";\n\nexport const generateBoxNumber = (row, column) => {\n  let boxNumber = [];\n  const coord = { row: +row, column: +column };\n\n  if ([1, 2, 3].includes(coord.row) && [1, 2, 3].includes(coord.column)) {\n    boxNumber = 1;\n  } else if (\n    [1, 2, 3].includes(coord.row) &&\n    [4, 5, 6].includes(coord.column)\n  ) {\n    boxNumber = 2;\n  } else if (\n    [1, 2, 3].includes(coord.row) &&\n    [7, 8, 9].includes(coord.column)\n  ) {\n    boxNumber = 3;\n  } else if (\n    [4, 5, 6].includes(coord.row) &&\n    [1, 2, 3].includes(coord.column)\n  ) {\n    boxNumber = 4;\n  } else if (\n    [4, 5, 6].includes(coord.row) &&\n    [4, 5, 6].includes(coord.column)\n  ) {\n    boxNumber = 5;\n  } else if (\n    [4, 5, 6].includes(coord.row) &&\n    [7, 8, 9].includes(coord.column)\n  ) {\n    boxNumber = 6;\n  } else if (\n    [7, 8, 9].includes(coord.row) &&\n    [1, 2, 3].includes(coord.column)\n  ) {\n    boxNumber = 7;\n  } else if (\n    [7, 8, 9].includes(coord.row) &&\n    [4, 5, 6].includes(coord.column)\n  ) {\n    boxNumber = 8;\n  } else if (\n    [7, 8, 9].includes(coord.row) &&\n    [7, 8, 9].includes(coord.column)\n  ) {\n    boxNumber = 9;\n  } else boxNumber = null;\n\n  return boxNumber;\n};\n\nexport const generatePuzzleAndSolvedPuzzle = (difficulty) => {\n  const puzzle = makepuzzle();\n\n  // The correct puzzle\n  const correctPuzzle = puzzle.map((el) => {\n    // The sudoku solver package denotes \"9\" as \"0\"\n    if (el === 0) {\n      return 9;\n    } else return el;\n  });\n\n  const solvedPuzzle = solvepuzzle(puzzle);\n\n  // The correct solved puzzle\n  const correctSolvedPuzzle = solvedPuzzle.map((el) => {\n    // The sudoku solver package denotes \"9\" as \"0\"\n    if (el === 0) {\n      return 9;\n    } else return el;\n  });\n\n  // Logics for difficulty\n  ///////////////////////////\n\n  // Gets filled indices in puzzle\n  const emptyIndices = correctPuzzle\n    .map((el, idx) => {\n      if (el == null) {\n        return { index: idx };\n      } else return { index: \"empty\" };\n    })\n    .filter((el) => el.index !== \"empty\");\n\n  /*\n  Filling more cells based on difficulty\n      Easy - only 10 cells are empty\n      Medium - only 25 cells are empty\n      Hard- only 40 cells are empty\n  */\n\n  let numberOfBoxesToRemainEmpty = 0;\n  if (difficulty === EASY_PUZZLE) {\n    numberOfBoxesToRemainEmpty = 10;\n  } else if (difficulty === MEDIUM_PUZZLE) {\n    numberOfBoxesToRemainEmpty = 30;\n  } else if (difficulty === HARD_PUZZLE) {\n    numberOfBoxesToRemainEmpty = 50;\n  } else {\n    // Just go easy\n    numberOfBoxesToRemainEmpty = 10;\n  }\n\n  const correctPuzzleWithDifficulty = correctPuzzle;\n\n  const emptyIndicesInitialLength = emptyIndices.length;\n\n  for (\n    let counter = 0;\n    counter < emptyIndicesInitialLength - numberOfBoxesToRemainEmpty;\n    counter++\n  ) {\n    // Get random cells of the empty cells\n    const emptyIndicesLength = emptyIndices.length;\n    const rnd = Math.floor(Math.random() * emptyIndicesLength);\n\n    let currElIndex = emptyIndices[rnd].index;\n    emptyIndices.splice(rnd, 1);\n    correctPuzzleWithDifficulty[currElIndex] = correctSolvedPuzzle[currElIndex];\n  }\n\n  const formattedCorrectPuzzleWithDifficulty = [\n    [...correctPuzzleWithDifficulty.slice(0, 9)],\n    [...correctPuzzleWithDifficulty.slice(9, 18)],\n    [...correctPuzzleWithDifficulty.slice(18, 27)],\n    [...correctPuzzleWithDifficulty.slice(27, 36)],\n    [...correctPuzzleWithDifficulty.slice(36, 45)],\n    [...correctPuzzleWithDifficulty.slice(45, 54)],\n    [...correctPuzzleWithDifficulty.slice(54, 63)],\n    [...correctPuzzleWithDifficulty.slice(63, 72)],\n    [...correctPuzzleWithDifficulty.slice(72, 81)],\n  ];\n\n  const formattedSolvedPuzzle = [\n    [...correctSolvedPuzzle.slice(0, 9)],\n    [...correctSolvedPuzzle.slice(9, 18)],\n    [...correctSolvedPuzzle.slice(18, 27)],\n    [...correctSolvedPuzzle.slice(27, 36)],\n    [...correctSolvedPuzzle.slice(36, 45)],\n    [...correctSolvedPuzzle.slice(45, 54)],\n    [...correctSolvedPuzzle.slice(54, 63)],\n    [...correctSolvedPuzzle.slice(63, 72)],\n    [...correctSolvedPuzzle.slice(72, 81)],\n  ];\n\n  return {\n    puzzle: formattedCorrectPuzzleWithDifficulty,\n    solvedPuzzle: formattedSolvedPuzzle,\n  };\n};\n\nexport const solvePuzzleFromUserInputtedPuzzle = (userPuzzle) => {\n  const flatUserPuzzle = userPuzzle.flat();\n\n  const puzzleSetForSolving = flatUserPuzzle.map((el) => {\n    // The sudoku solver package denotes \"9\" as \"0\"\n    if (el === 9) {\n      return 0;\n    } else return el;\n  });\n\n  const solvedPuzzle = solvepuzzle(puzzleSetForSolving);\n\n  if (solvedPuzzle === null) {\n    return null;\n  } else {\n    // The correct solved puzzle\n    const correctSolvedPuzzle = solvedPuzzle.map((el) => {\n      // The sudoku solver package denotes \"9\" as \"0\"\n      if (el === 0) {\n        return 9;\n      } else return el;\n    });\n\n    const formattedSolvedPuzzle = [\n      [...correctSolvedPuzzle.slice(0, 9)],\n      [...correctSolvedPuzzle.slice(9, 18)],\n      [...correctSolvedPuzzle.slice(18, 27)],\n      [...correctSolvedPuzzle.slice(27, 36)],\n      [...correctSolvedPuzzle.slice(36, 45)],\n      [...correctSolvedPuzzle.slice(45, 54)],\n      [...correctSolvedPuzzle.slice(54, 63)],\n      [...correctSolvedPuzzle.slice(63, 72)],\n      [...correctSolvedPuzzle.slice(72, 81)],\n    ];\n\n    // Returns the solved puzzle if if solved it, else it returns null\n    return formattedSolvedPuzzle;\n  }\n};\n","import React, { useEffect } from \"react\";\nimport * as classes from \"./Feedback.module.css\";\n\nimport PropTypes from \"prop-types\";\n\nconst Feedback = (props) => {\n  useEffect(() => {\n    const unmountTimeout = setTimeout(() => {\n      props.unmountMe();\n    }, 2000);\n\n    return () => clearTimeout(unmountTimeout);\n  }, []);\n\n  let styleClasses;\n\n  if (props.show) {\n    styleClasses = [classes.Feedback, classes.Visible];\n  } else {\n    styleClasses = [classes.Feedback];\n  }\n\n  if (props.type === \"success\") {\n    styleClasses.push(classes.Success);\n  } else if (props.type === \"danger\") {\n    styleClasses.push(classes.Danger);\n  }\n\n  return (\n    <div className={styleClasses.join(\" \")}>\n      <p>{props.message}</p>\n    </div>\n  );\n};\nexport default Feedback;\n\nFeedback.propTypes = {\n  unmountMe: PropTypes.func,\n  show: PropTypes.bool,\n  type: PropTypes.string,\n  message: PropTypes.string,\n};\n","import React from \"react\";\nimport * as classes from \"./GameRules.module.css\";\n\nimport PropTypes from \"prop-types\";\n\nconst GameRules = (props) => {\n  const styleClasses = [classes.GameRules];\n\n  if (props.show) {\n    styleClasses.push(classes.Visible);\n  }\n\n  return (\n    <div className={styleClasses.join(\" \")}>\n      <h3>Rules of the game</h3>\n      <ul className={classes.List}>\n        <li>\n          Each row must contain the numbers from 1 to 9, without repetitions\n        </li>\n        <li>\n          Each column must contain the numbers from 1 to 9, without repetitions\n        </li>\n        <li>The digits can only occur once per block</li>\n      </ul>\n      <h3>Tips</h3>\n      <ul className={classes.List}>\n        <li> Don’t Repeat Any Numbers</li>\n        <li>Don't guess, keep scanning till you see an opportunity</li>\n        <li>\n          Use the process of elimination (start with rows, columns or blocks\n          that are almost completely filled)\n        </li>\n        <li>\n          Complete beginner?{\" \"}\n          <a\n            rel=\"noreferrer\"\n            target=\"_blank\"\n            href=\"https://sudoku.com/how-to-play/sudoku-rules-for-complete-beginners/\"\n          >\n            Learn Sudoku here\n          </a>\n        </li>\n      </ul>\n    </div>\n  );\n};\nexport default GameRules;\n\nGameRules.propTypes = {\n  show: PropTypes.bool,\n};\n","import React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport * as classes from \"./Sudoku.module.css\";\nimport Cell from \"../../components/Cell/Cell\";\nimport * as sudokuActions from \"../../store/actions/sudokuActions\";\nimport * as appUIactions from \"../../store/actions/appUIactions\";\nimport SudokuBoxes from \"./SudokuBoxes/SudokuBoxes\";\nimport * as helpers from \"../../helpers/helpers\";\nimport Feedback from \"../../components/Feedback/Feedback\";\nimport GameRules from \"../../components/GameRules/GameRules\";\n\nimport PropTypes from \"prop-types\";\n\nconst Sudoku = (props) => {\n  useEffect(() => {\n    checkForRepeatedNumbersInRowsAndColumns();\n  }, [props.isAnyCellJustUpdated]);\n\n  useEffect(() => {\n    setShowFeedbackComp(\n      props.isSudokuSolved || props.doesUserInputtedPuzzleHaveError\n    );\n  }, [props.isSudokuSolved, props.doesUserInputtedPuzzleHaveError]);\n\n  const [showFeedbackComp, setShowFeedbackComp] = useState(false);\n\n  const generateRepeatedNumbersInRows = (state) => {\n    let repeatedNumbersArr = [];\n    let repeatedNumbersRows = [];\n    state.forEach((row, index) => {\n      const allNumberCounter = [\n        { val: 1, count: 0 },\n        { val: 2, count: 0 },\n        { val: 3, count: 0 },\n        { val: 4, count: 0 },\n        { val: 5, count: 0 },\n        { val: 6, count: 0 },\n        { val: 7, count: 0 },\n        { val: 8, count: 0 },\n        { val: 9, count: 0 },\n      ];\n\n      row.forEach((cell, i) => {\n        // Guard class\n        if (cell === null) return;\n        const currentIndex = allNumberCounter.findIndex(\n          (el) => el.val === cell\n        );\n\n        if (currentIndex !== -1) {\n          const newCounterEl = {\n            val: cell,\n            count: allNumberCounter[currentIndex].count + 1,\n          };\n          allNumberCounter[currentIndex] = newCounterEl;\n        }\n      });\n      const repeatNums = [];\n\n      const repeatedNumbersObj = allNumberCounter.filter((el) => el.count > 1);\n      for (const num in repeatedNumbersObj) {\n        const repeatedNum = repeatedNumbersObj[num].val;\n\n        repeatNums.push(repeatedNum);\n        repeatedNumbersRows.push(index + 1);\n      }\n\n      repeatedNumbersArr = repeatedNumbersArr.concat(repeatNums);\n    });\n\n    props.setInvalidRows(repeatedNumbersRows);\n    return repeatedNumbersArr;\n  };\n\n  const generateRepeatedNumbersInColumns = (state) => {\n    let repeatedNumbersArr = [];\n    let repeatedNumbersColumns = [];\n    const transformedState = state.map((outer_el, outer_i, mainArr) => {\n      const columnFromRow = [];\n      outer_el.forEach((_, inner_i) => {\n        const newEl = mainArr[inner_i][outer_i];\n        columnFromRow.push(newEl);\n      });\n      return columnFromRow;\n    });\n\n    transformedState.forEach((row, index) => {\n      const allNumberCounter = [\n        { val: 1, count: 0 },\n        { val: 2, count: 0 },\n        { val: 3, count: 0 },\n        { val: 4, count: 0 },\n        { val: 5, count: 0 },\n        { val: 6, count: 0 },\n        { val: 7, count: 0 },\n        { val: 8, count: 0 },\n        { val: 9, count: 0 },\n      ];\n\n      row.forEach((cell, i) => {\n        // Guard class\n        if (cell === null) return;\n        const currentIndex = allNumberCounter.findIndex(\n          (el) => el.val === cell\n        );\n\n        if (currentIndex !== -1) {\n          const newCounterEl = {\n            val: cell,\n            count: allNumberCounter[currentIndex].count + 1,\n          };\n          allNumberCounter[currentIndex] = newCounterEl;\n        }\n      });\n      const repeatNums = [];\n\n      const repeatedNumbersObj = allNumberCounter.filter((el) => el.count > 1);\n      for (const num in repeatedNumbersObj) {\n        const repeatedNum = repeatedNumbersObj[num].val;\n        repeatedNumbersColumns.push(index + 1);\n        repeatNums.push(repeatedNum);\n      }\n\n      repeatedNumbersArr = repeatedNumbersArr.concat(repeatNums);\n    });\n    // console.log(repeatedNumbersArr);\n    // console.log(repeatedNumbersColumns);\n    props.setInvalidColumns(repeatedNumbersColumns);\n    return repeatedNumbersArr;\n  };\n\n  const checkForRepeatedNumbersInRowsAndColumns = () => {\n    const repeatedNumbersInRows = generateRepeatedNumbersInRows(\n      props.sudokuState\n    );\n    const repeatedNumbersInColumns = generateRepeatedNumbersInColumns(\n      props.sudokuState\n    );\n    const repeatedNumbers = [\n      ...new Set([...repeatedNumbersInRows, ...repeatedNumbersInColumns]),\n    ];\n\n    // Checks if sudoku is solved\n    checkIfSudokuIsSolved(\n      repeatedNumbersInRows,\n      repeatedNumbersInColumns,\n      repeatedNumbers\n    );\n\n    props.setInvalidNumbers(repeatedNumbers);\n  };\n\n  const cellFocusHandler = (row, column) => {\n    props.setActivateCellState(row, column);\n  };\n\n  const checkIfSudokuIsSolved = (\n    invalidRows,\n    invalidColumns,\n    invalidNumbers\n  ) => {\n    const sudokuState = [...props.sudokuState];\n    // converting 2-D array to 1-D\n    const flatSudokuState = sudokuState.flat();\n\n    const isAllCellsCompletelyFilled = !flatSudokuState.includes(null);\n\n    const isThereNoInvalidRow = !Boolean(invalidRows.length);\n    const isThereNoInvalidColumn = !Boolean(invalidColumns.length);\n    const isThereNoInvalidNumber = !Boolean(invalidNumbers.length);\n\n    const isSudokuSolved =\n      isAllCellsCompletelyFilled &&\n      isThereNoInvalidRow &&\n      isThereNoInvalidColumn &&\n      isThereNoInvalidNumber;\n\n    if (isSudokuSolved) {\n      props.setSudokuStateToSolved();\n    }\n  };\n\n  const styleClasses = [classes.Sudoku];\n\n  if (props.isSudokuSolved) {\n    styleClasses.push(classes.Solved);\n  }\n\n  const hideFeedbackComp = () => {\n    setShowFeedbackComp(false);\n  };\n\n  return (\n    <div className={styleClasses.join(\" \")}>\n      <GameRules show={props.showGameRules} />\n      <SudokuBoxes />\n\n      {/* Sudoku logic */}\n      <div className={classes.Content}>\n        {props.sudokuState.flat().map((el, i) => {\n          const row = Math.floor(i / 9) + 1;\n          const column = (i + 1) % 9 === 0 ? 9 : (i + 1) % 9;\n          const boxNumber = helpers.generateBoxNumber(row, column);\n\n          const isInvalidInRowOrColumn =\n            props.invalidNumbersArr.includes(el) &&\n            (props.invalidRows.includes(row) ||\n              props.invalidColumns.includes(column));\n          const isInvalidInBox =\n            props.invalidBoxesArr.includes(boxNumber) &&\n            props.invalidBoxesNumbersArr.includes(el);\n\n          return (\n            <Cell\n              key={i}\n              value={el}\n              cellFocusHandler={cellFocusHandler}\n              row={row}\n              column={column}\n              isInvalid={isInvalidInRowOrColumn || isInvalidInBox}\n              isDefault={props.defaultCellCoordinates.some(\n                (el) => el[0] === row && el[1] === column\n              )}\n            />\n          );\n        })}\n      </div>\n      {showFeedbackComp ? (\n        <Feedback\n          show={true}\n          type={props.isSudokuSolved ? \"success\" : \"danger\"}\n          message={\n            props.isSudokuSolved\n              ? \"Solved\"\n              : \"That's not solvable. Valid Sudoku don't contain error. Fix errors and try again\"\n          }\n          unmountMe={hideFeedbackComp}\n        />\n      ) : null}\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    // app UI reducer\n    showGameRules: state.appUI.showGameRules,\n    activeCell: state.appUI.activeCell,\n\n    // sudoku reducer\n    sudokuState: state.sudoku.sudokuState,\n    invalidNumbersArr: state.sudoku.invalidNumbersArr,\n    isAnyCellJustUpdated: state.sudoku.isAnyCellJustUpdated,\n    invalidRows: state.sudoku.invalidRowsArr,\n    invalidColumns: state.sudoku.invalidColumnsArr,\n    invalidBoxesArr: state.sudoku.invalidBoxesArr,\n    invalidBoxesNumbersArr: state.sudoku.invalidBoxesNumbersArr,\n    allValuesAreDefault: state.sudoku.allValuesAreDefault,\n    defaultCellCoordinates: state.sudoku.defaultCellCoordinates,\n    isSudokuSolved: state.sudoku.isSudokuSolved,\n\n    doesUserInputtedPuzzleHaveError:\n      state.sudoku.doesUserInputtedPuzzleHaveError,\n    isUserInputtedPuzzleSolvable: state.sudoku.isUserInputtedPuzzleSolvable,\n    isUserInputtedPuzzleSolved: state.sudoku.isUserInputtedPuzzleSolved,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    setActivateCellState: (row, column) =>\n      dispatch(appUIactions.setACtiveCellState(row, column)),\n    setInvalidNumbers: (invalidNumbersArr) =>\n      dispatch(sudokuActions.setInvalidCells(invalidNumbersArr)),\n    setInvalidRows: (invalidRows) =>\n      dispatch(sudokuActions.setInvalidRows(invalidRows)),\n    setInvalidColumns: (invalidColumns) =>\n      dispatch(sudokuActions.setInvalidColumns(invalidColumns)),\n    setSudokuStateToSolved: () => dispatch(sudokuActions.sudokuIsSolved()),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Sudoku);\n\nCell.propTypes = {\n  showGameRules: PropTypes.bool,\n  activeCell: PropTypes.object,\n\n  // sudoku reducer\n  sudokuState: PropTypes.array,\n  invalidNumbersArr: PropTypes.array,\n  isAnyCellJustUpdated: PropTypes.any,\n  invalidRows: PropTypes.array,\n  invalidColumns: PropTypes.array,\n  invalidBoxesArr: PropTypes.array,\n  invalidBoxesNumbersArr: PropTypes.array,\n  allValuesAreDefault: PropTypes.bool,\n  defaultCellCoordinates: PropTypes.array,\n  isSudokuSolved: PropTypes.bool,\n  doesUserInputtedPuzzleHaveError: PropTypes.bool,\n  isUserInputtedPuzzleSolvable: PropTypes.bool,\n  isUserInputtedPuzzleSolved: PropTypes.bool,\n\n  setActivateCellState: PropTypes.func,\n  setInvalidNumbers: PropTypes.func,\n  setInvalidRows: PropTypes.func,\n  setInvalidColumns: PropTypes.func,\n  setSudokuStateToSolved: PropTypes.func,\n};\n","import React from \"react\";\nimport * as classes from \"./CellInput.module.css\";\nimport PropTypes from \"prop-types\";\n\nconst CellInput = (props) => {\n  const cellInputClasses = [classes.CellInput];\n  if (props.isClear) cellInputClasses.push(classes.ClearCell);\n\n  const onClickHandler = () => {\n    if (props.isClear) {\n      props.cellInputClickedHandler(null);\n      return;\n    }\n    props.cellInputClickedHandler(+props.value);\n  };\n\n  return (\n    <div className={cellInputClasses.join(\" \")} onClick={onClickHandler}>\n      <p className={classes.Value}>{props.value}</p>\n    </div>\n  );\n};\nexport default CellInput;\n\nCellInput.propTypes = {\n  isClear: PropTypes.bool,\n  cellInputClickedHandler: PropTypes.func,\n  value: PropTypes.any,\n};\n","import React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport * as classes from \"./CellInputs.module.css\";\nimport CellInput from \"../../components/CellInput/CellInput\";\nimport * as sudokuActions from \"../../store/actions/sudokuActions\";\n\nimport PropTypes from \"prop-types\";\n\nconst availableInputs = [\"C\", 1, 2, 3, 4, 5, 6, 7, 8, 9];\n\nconst CellInputs = (props) => {\n  useEffect(() => {\n    const keyDownHandler = (event) => {\n      onKeyDownHandler(event);\n    };\n    document.body.addEventListener(\"keydown\", keyDownHandler);\n\n    return () => {\n      document.body.removeEventListener(\"keydown\", keyDownHandler);\n    };\n  }, [props.activeCell]);\n\n  const cellInputClickedHandler = (value) => {\n    const { row, column } = props.activeCell;\n    props.setSudokuState(row, column, value);\n  };\n\n  const onKeyDownHandler = (event) => {\n    let key = event.key;\n\n    const supportedInputs = [\n      \"1\",\n      \"2\",\n      \"3\",\n      \"4\",\n      \"5\",\n      \"6\",\n      \"7\",\n      \"8\",\n      \"9\",\n      \"Backspace\",\n    ];\n    if (!supportedInputs.includes(key)) return;\n    let bindingValue = key === \"Backspace\" ? null : +key;\n\n    cellInputClickedHandler(bindingValue);\n  };\n\n  return (\n    <div className={classes.CellInputs}>\n      {availableInputs.map((el, i) => (\n        <CellInput\n          key={i}\n          value={el}\n          cellInputClickedHandler={cellInputClickedHandler}\n          isClear={el === \"C\" ? true : false}\n        />\n      ))}\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    activeCell: state.appUI.activeCell,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    setSudokuState: (row, column, value) =>\n      dispatch(sudokuActions.setSudokuState(row, column, value)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CellInputs);\n\nCellInputs.propTypes = {\n  activeCell: PropTypes.object,\n  setSudokuState: PropTypes.func,\n};\n","export const setActiveCellState = (action, state) => {\n  return {\n    ...state,\n    activeCell: { row: action.payload.row, column: action.payload.column },\n  };\n};\n\nexport const clearActiveCell = (action, state) => {\n  return {\n    ...state,\n    activeCell: {\n      row: null,\n      column: null,\n    },\n  };\n};\n\nexport const toggleIntroComponent = (action, state) => {\n  return {\n    ...state,\n    showIntroComponent: !state.showIntroComponent,\n    activeCell: {\n      row: null,\n      column: null,\n    },\n  };\n};\n\nexport const toggleGameRules = (action, state) => {\n  return {\n    ...state,\n    showGameRules: !state.showGameRules,\n  };\n};\n","import * as actions from \"../actions/actionTypes\";\nimport * as appUIreducerHelper from \"../../helpers/appUIreducerHelper\";\n\nconst store = {\n  isAnyCellActive: false,\n  activeCell: {\n    row: null,\n    column: null,\n  },\n  showIntroComponent: true,\n  showGameRules: false,\n};\n\nconst reducer = (state = store, action) => {\n  switch (action.type) {\n    case actions.SET_ACTIVE_CELL_STATE:\n      const newStateSetActiveCellState = appUIreducerHelper.setActiveCellState(\n        action,\n        state\n      );\n      return newStateSetActiveCellState;\n\n    case actions.CLEAR_ACTIVE_CELL:\n      const newStateClearActiveCell = appUIreducerHelper.clearActiveCell(\n        action,\n        state\n      );\n      return newStateClearActiveCell;\n\n    case actions.TOGGLE_INTRO_COMPONENT:\n      const newStateToggleIntroComponent =\n        appUIreducerHelper.toggleIntroComponent(action, state);\n      return newStateToggleIntroComponent;\n\n    case actions.TOGLE_GAME_RULES:\n      const newStateToggleGameRules = appUIreducerHelper.toggleGameRules(\n        action,\n        state\n      );\n      return newStateToggleGameRules;\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import {\n  generatePuzzleAndSolvedPuzzle,\n  solvePuzzleFromUserInputtedPuzzle,\n} from \"../helpers/helpers\";\n\nexport const defaultState = {\n  sudokuState: [\n    [null, null, null, null, null, null, null, null, null],\n    [null, null, null, null, null, null, null, null, null],\n    [null, null, null, null, null, null, null, null, null],\n    [null, null, null, null, null, null, null, null, null],\n    [null, null, null, null, null, null, null, null, null],\n    [null, null, null, null, null, null, null, null, null],\n    [null, null, null, null, null, null, null, null, null],\n    [null, null, null, null, null, null, null, null, null],\n    [null, null, null, null, null, null, null, null, null],\n  ],\n  solvedState: null,\n  invalidNumbersArr: [],\n  invalidRowsArr: [],\n  invalidColumnsArr: [],\n  invalidBoxesArr: [],\n  invalidBoxesNumbersArr: [],\n  // isAnyCellJustUpdated switches between \"foo\" and \"bar\" just to signal a change\n  isAnyCellJustUpdated: \"foo\",\n  defaultCellCoordinates: [\n    // a coordinate is given as [row, column]\n  ],\n  isSudokuSolved: false,\n  difficulty: null,\n  doesUserInputtedPuzzleHaveError: false,\n  isUserInputtedPuzzleSolvable: true,\n  isUserInputtedPuzzleSolved: false,\n  currentMode: null,\n};\n\nexport const setGameMode = (action, state) => {\n  return {\n    ...state,\n    currentMode: action.payload.mode,\n    // Setting the rest to default - initting the game\n    invalidNumbersArr: [],\n    invalidRowsArr: [],\n    invalidColumnsArr: [],\n    invalidBoxesArr: [],\n    invalidBoxesNumbersArr: [],\n    isAnyCellJustUpdated: \"foo\",\n    isSudokuSolved: false,\n    difficulty: state.difficulty,\n    doesUserInputtedPuzzleHaveError: false,\n    isUserInputtedPuzzleSolvable: true,\n    isUserInputtedPuzzleSolved: false,\n  };\n};\n\nexport const setDifficulty = (action, state) => {\n  const difficulty = action.payload.difficulty;\n  return {\n    ...state,\n    difficulty: difficulty,\n  };\n};\n\nexport const setPuzzleAndSolvedPuzzle = (action, state) => {\n  const generatedPuzzleAndSolvedPuzzle = generatePuzzleAndSolvedPuzzle(\n    state.difficulty\n  );\n  const generatedPuzzle = generatedPuzzleAndSolvedPuzzle.puzzle;\n  const generatedSolvedPuzzle = generatedPuzzleAndSolvedPuzzle.solvedPuzzle;\n\n  const defaultCellCoords = [];\n  generatedPuzzle.forEach((outer_el, outer_idx, outer_arr) => {\n    outer_el.forEach((inner_el, inner_idx, inner_arr) => {\n      // console.log(inner_el);\n\n      if (inner_el === null) return;\n      const row = outer_idx + 1;\n      const column = inner_idx + 1;\n      defaultCellCoords.push([row, column]);\n    });\n  });\n\n  return {\n    ...state,\n    sudokuState: generatedPuzzle,\n    solvedState: generatedSolvedPuzzle,\n    defaultCellCoordinates: defaultCellCoords,\n    invalidRowsArr: [],\n    invalidColumnsArr: [],\n    invalidNumbersArr: [],\n    isSudokuSolved: false,\n  };\n};\n\nexport const solvePuzzle = (action, state) => {\n  //   if (state.solvedState === null) alert(\"No solved state available\");\n\n  const allCellCoords = [];\n  state.solvedState.forEach((outer_el, outer_idx, outer_arr) => {\n    outer_el.forEach((inner_el, inner_idx, inner_arr) => {\n      // console.log(inner_el);\n\n      if (inner_el === null) return;\n      const row = outer_idx + 1;\n      const column = inner_idx + 1;\n      allCellCoords.push([row, column]);\n    });\n  });\n\n  return {\n    ...state,\n    sudokuState: state.solvedState,\n    invalidRowsArr: [],\n    invalidColumnsArr: [],\n    invalidNumbersArr: [],\n    isSudokuSolved: true,\n    defaultCellCoordinates: allCellCoords,\n  };\n};\n\nexport const setSudokuState = (action, state) => {\n  const newState = state.sudokuState.map((el, i) => {\n    if (i === action.payload.row - 1) {\n      const newRow = el.map((el, i) => {\n        if (i === action.payload.column - 1) {\n          // console.log(\"Yayyyy\");\n          return action.payload.value;\n        } else return el;\n      });\n      // console.log(newRow);\n      return newRow;\n    } else return el;\n  });\n\n  return {\n    ...state,\n    sudokuState: newState,\n    isAnyCellJustUpdated: state.isAnyCellJustUpdated === \"foo\" ? \"bar\" : \"foo\",\n  };\n};\n\nexport const setInvalidCells = (action, state) => {\n  const newInvalidNumbers = [...action.payload.invalidNumbersArr];\n  return {\n    ...state,\n    invalidNumbersArr: newInvalidNumbers,\n    // doesUserInputtedPuzzleHaveError: true,\n  };\n};\n\nexport const setInvalidRows = (action, state) => {\n  return {\n    ...state,\n    invalidRowsArr: [...action.payload.invalidRows],\n    isSudokuSolved: false,\n  };\n};\n\nexport const setInvalidColumns = (action, state) => {\n  return {\n    ...state,\n    invalidColumnsArr: [...action.payload.invalidColumns],\n    isSudokuSolved: false,\n  };\n};\n\nexport const sudokuIsSolved = (action, state) => {\n  return {\n    ...state,\n    isSudokuSolved: true,\n  };\n};\n\nexport const setInvalidBoesAndNumbers = (action, state) => {\n  const invalidBoxes = action.payload.invalidBoxesArr;\n  const invalidNumbers = action.payload.invalidNumbersArr;\n\n  return {\n    ...state,\n    invalidBoxesArr: invalidBoxes,\n    invalidBoxesNumbersArr: invalidNumbers,\n  };\n};\n\nexport const solveSudokuForUser = (action, state) => {\n  const isInvalidNumbersArrEmpty = state.invalidNumbersArr.length === 0;\n  const isInvalidRowsArrEmpty = state.invalidRowsArr.length === 0;\n  const isInvalidColumnsArrEmpty = state.invalidColumnsArr.length === 0;\n  const isInvalidBoxesArrEmpty = state.invalidBoxesArr.length === 0;\n  const isInvalidBoxesNumbersArrEmpty =\n    state.invalidBoxesNumbersArr.length === 0;\n\n  const noErrors =\n    isInvalidNumbersArrEmpty &&\n    isInvalidRowsArrEmpty &&\n    isInvalidColumnsArrEmpty &&\n    isInvalidBoxesArrEmpty &&\n    isInvalidBoxesNumbersArrEmpty;\n\n  const attemptedSolvedState = solvePuzzleFromUserInputtedPuzzle(\n    state.sudokuState\n  );\n\n  if (!noErrors) {\n    return {\n      ...state,\n      doesUserInputtedPuzzleHaveError: true,\n      isUserInputtedPuzzleSolvable: false,\n      isUserInputtedPuzzleSolved: false,\n    };\n  } else if (attemptedSolvedState === null) {\n    console.log(\"Not solvable\");\n\n    return {\n      ...state,\n      isUserInputtedPuzzleSolvable: false,\n      isUserInputtedPuzzleSolved: false,\n      doesUserInputtedPuzzleHaveError: false,\n    };\n  } else {\n    // console.log(\"Solved\");\n    const allCellCoordsArr = [];\n    attemptedSolvedState.forEach((outer_el, outer_idx, outer_arr) => {\n      outer_el.forEach((inner_el, inner_idx, inner_arr) => {\n        // console.log(inner_el);\n\n        if (inner_el === null) return;\n        const row = outer_idx + 1;\n        const column = inner_idx + 1;\n        allCellCoordsArr.push([row, column]);\n      });\n    });\n\n    return {\n      ...state,\n      sudokuState: attemptedSolvedState,\n      isUserInputtedPuzzleSolvable: true,\n      isUserInputtedPuzzleSolved: true,\n      isSudokuSolved: true,\n      defaultCellCoordinates: allCellCoordsArr,\n      doesUserInputtedPuzzleHaveError: false,\n    };\n  }\n};\n\nexport const initUserInputSUdokuToSolve = (action, state) => {\n  const defaultSudokuState = [\n    [null, null, null, null, null, null, null, null, null],\n    [null, null, null, null, null, null, null, null, null],\n    [null, null, null, null, null, null, null, null, null],\n    [null, null, null, null, null, null, null, null, null],\n    [null, null, null, null, null, null, null, null, null],\n    [null, null, null, null, null, null, null, null, null],\n    [null, null, null, null, null, null, null, null, null],\n    [null, null, null, null, null, null, null, null, null],\n    [null, null, null, null, null, null, null, null, null],\n  ];\n  return {\n    ...state,\n    sudokuState: defaultSudokuState,\n    defaultCellCoordinates: [],\n    isSudokuSolved: false,\n  };\n};\n","import * as actions from \"../actions/actionTypes\";\nimport * as sudokuReducerHelper from \"../../helpers/sudokuReducerHelper\";\n\nconst dafaultState = sudokuReducerHelper.defaultState;\n\nconst reducer = (state = dafaultState, action) => {\n  switch (action.type) {\n    case actions.SET_GAME_MODE:\n      const newStateSetNewGame = sudokuReducerHelper.setGameMode(action, state);\n      return newStateSetNewGame;\n\n    case actions.SET_DIFFICULTY:\n      const newStateSetDifficulty = sudokuReducerHelper.setDifficulty(\n        action,\n        state\n      );\n      return newStateSetDifficulty;\n\n    case actions.SET_PUZZLE_AND_SOLVED_PUZZLE:\n      const newStateSetPuzzleAndSolvedPuzzle =\n        sudokuReducerHelper.setPuzzleAndSolvedPuzzle(action, state);\n      return newStateSetPuzzleAndSolvedPuzzle;\n\n    case actions.SOLVE_PUZZLE:\n      const newStateSolvePuzzle = sudokuReducerHelper.solvePuzzle(\n        action,\n        state\n      );\n      return newStateSolvePuzzle;\n\n    case actions.SET_SUDOKU_STATE:\n      const newStateSetSudokuState = sudokuReducerHelper.setSudokuState(\n        action,\n        state\n      );\n      return newStateSetSudokuState;\n\n    case actions.SET_INVALID_CELLS:\n      const newStateSetInvalidCells = sudokuReducerHelper.setInvalidCells(\n        action,\n        state\n      );\n      return newStateSetInvalidCells;\n\n    case actions.SET_INVALID_ROWS:\n      const newStateSetInvalidRows = sudokuReducerHelper.setInvalidRows(\n        action,\n        state\n      );\n      return newStateSetInvalidRows;\n\n    case actions.SET_INVALID_COLUMNS:\n      const newStateSetInvalidColumns = sudokuReducerHelper.setInvalidColumns(\n        action,\n        state\n      );\n      return newStateSetInvalidColumns;\n\n    case actions.SUDOKU_IS_SOLVED:\n      const newStateSudokuIsSolved = sudokuReducerHelper.sudokuIsSolved(\n        action,\n        state\n      );\n      return newStateSudokuIsSolved;\n\n    case actions.SET_INVALID_BOXES_AND_NUMBERS:\n      const newStateSetInvalidBoxesAndNumbers =\n        sudokuReducerHelper.setInvalidBoesAndNumbers(action, state);\n      return newStateSetInvalidBoxesAndNumbers;\n\n    case actions.SOLVE_SUDOKU_FOR_USER:\n      const newStateSolveSudokuForUser = sudokuReducerHelper.solveSudokuForUser(\n        action,\n        state\n      );\n      return newStateSolveSudokuForUser;\n\n    case actions.INIT_USER_INPUT_SUDOKU_TO_SOLVE:\n      const newStateInitUserInputSudokuToSolve =\n        sudokuReducerHelper.initUserInputSUdokuToSolve(action, state);\n      return newStateInitUserInputSudokuToSolve;\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","export default __webpack_public_path__ + \"static/media/video.697d9c04.mp4\";","import React from \"react\";\nimport * as classes from \"./Layout.module.css\";\nimport bgVideoMp4 from \"../../assets/video.mp4\";\n\nconst Layout = (props) => {\n  return (\n    <div className={classes.Layout}>\n      <div className={classes.BgVideo}>\n        <video autoPlay={true} loop muted src={bgVideoMp4}></video>\n      </div>\n      {props.children}\n    </div>\n  );\n};\nexport default Layout;\n","import React from \"react\";\nimport * as classes from \"./SudokuBoardContainer.module.css\";\n\nconst SudokuBoardContainer = (props) => {\n  return <div className={classes.SudokuBoardContainer}>{props.children}</div>;\n};\nexport default SudokuBoardContainer;\n","import React from \"react\";\nimport * as classes from \"./Button.module.css\";\n\nimport PropTypes from \"prop-types\";\n\nconst Button = (props) => {\n  const styleClasses = [classes.Button];\n\n  if (props.inlineBtn) {\n    styleClasses.push(classes.Inline);\n  }\n\n  return (\n    <button\n      className={styleClasses.join(\" \")}\n      onClick={props.clicked}\n      disabled={props.disabled}\n    >\n      {props.children}\n    </button>\n  );\n};\nexport default Button;\n\nButton.propTypes = {\n  inlineBtn: PropTypes.any,\n  clicked: PropTypes.func,\n  disabled: PropTypes.bool,\n  children: PropTypes.any,\n};\n","import React from \"react\";\nimport * as classes from \"./OptionSide.module.css\";\nimport Button from \"../../UI/Button/Button\";\n\nimport PropTypes from \"prop-types\";\n\nconst OptionSide = (props) => {\n  return (\n    <div className={classes.OptionSide}>\n      <h3>{props.heading}</h3>\n      <div className={classes.OptionDetails}>\n        <p>{props.details}</p>\n        {props.children}\n      </div>\n\n      <Button disabled={props.btnDisabledCondition} clicked={props.btnCTA}>\n        {props.btnLabel}\n      </Button>\n    </div>\n  );\n};\n\nexport default OptionSide;\n\nOptionSide.propTypes = {\n  heading: PropTypes.string,\n  details: PropTypes.string,\n  children: PropTypes.any,\n  btnCTA: PropTypes.func,\n  btnLabel: PropTypes.string,\n};\n","import React from \"react\";\nimport * as classes from \"./RadioButton.module.css\";\n\nimport PropTypes from \"prop-types\";\n\nconst RadioButton = (props) => {\n  return (\n    <div className={classes.RadioButton}>\n      <label className={classes.RadioLabel} htmlFor={props.id}>\n        {props.label}\n      </label>\n      <input\n        className={classes.RadioInput}\n        id={props.id}\n        name={props.name}\n        type=\"radio\"\n        onChange={props.checked}\n      />\n    </div>\n  );\n};\nexport default RadioButton;\n\nRadioButton.propTypes = {\n  label: PropTypes.any,\n  id: PropTypes.any,\n  name: PropTypes.any,\n  checked: PropTypes.func,\n};\n","import React from \"react\";\nimport * as classes from \"./RadioGroup.module.css\";\n\nimport RadioButton from \"./RadioButton/RadioButton\";\n\nimport PropTypes from \"prop-types\";\n\nconst RadioGroup = (props) => {\n  const radioBtns = props.radioBtns;\n\n  return (\n    <div className={classes.RadioGroup}>\n      <p className={classes.RadioGroupTitle}>{props.radioGroupTitle}</p>\n      <div className={classes.BtnContainer}>\n        {radioBtns.map((el, i) => (\n          <RadioButton\n            key={i}\n            label={el.radioLabel}\n            checked={el.radioAction}\n            id={i}\n            name={props.radioGroupName}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\nexport default RadioGroup;\n\nRadioGroup.propTypes = {\n  radioBtns: PropTypes.array,\n  radioGroupTitle: PropTypes.string,\n  radioGroupName: PropTypes.any,\n};\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport * as classes from \"./IntroPage.module.css\";\nimport * as sudokuActions from \"../../store/actions/sudokuActions\";\nimport * as appUIactions from \"../../store/actions/appUIactions\";\nimport { MODE_PLAY, MODE_SOLVE } from \"../../helpers/helpers\";\n\nimport OptionSide from \"../../components/OptionSIde/OptionSide\";\nimport RadioGroup from \"../../UI/RadioGroup/RadioGroup\";\n\nimport { EASY_PUZZLE, MEDIUM_PUZZLE, HARD_PUZZLE } from \"../../helpers/helpers\";\n\nimport PropTypes from \"prop-types\";\n\nconst IntroPage = (props) => {\n  const styleClasses = [classes.IntroPage];\n\n  if (!props.shouldShowIntroComponent) {\n    styleClasses.push(classes.Hidden);\n  }\n\n  const setEasyDifficulty = () => {\n    props.setDifficulty(EASY_PUZZLE);\n  };\n\n  const setMediumDifficulty = () => {\n    props.setDifficulty(MEDIUM_PUZZLE);\n  };\n  const setHardDifficulty = () => {\n    props.setDifficulty(HARD_PUZZLE);\n  };\n\n  const difficultyBtns = [\n    { radioLabel: \"Easy\", radioAction: setEasyDifficulty },\n    { radioLabel: \"Medium\", radioAction: setMediumDifficulty },\n    { radioLabel: \"Hard\", radioAction: setHardDifficulty },\n  ];\n\n  return (\n    <div className={styleClasses.join(\" \")}>\n      <div className={classes.Heading}>\n        <h1 className={classes.HeadingTitle}>\n          Welcome to Sudoku <span>♨︎</span>\n        </h1>\n        <h3 className={classes.HeadingInfo}>\n          Select a game mode below to get started\n        </h3>\n      </div>\n      <div className={classes.Options}>\n        <OptionSide\n          heading=\"Play Sudoku\"\n          details=\"Gives you a random sudoku game to solve. Cut your coat according to\n                  you size, choose your desired difficulty level below\"\n          btnLabel=\"Play now\"\n          btnDisabledCondition={!props.difficulty}\n          btnCTA={props.setPuzzleAndSolvedPuzzle}\n        >\n          <RadioGroup\n            radioGroupTitle=\"Select a difficulty level:\"\n            radioBtns={difficultyBtns}\n            radioGroupName=\"difficulty button\"\n          />\n        </OptionSide>\n\n        <OptionSide\n          heading=\"Solve my Sudoku\"\n          details='Maybe you have a sudoku that is yet to be solved🤔, enter all the\n                  values of the unsolved sudoku in the corresponding grid, click the \"Solve button\" and let the\n                  magic happen🙃'\n          btnLabel=\"Solve now\"\n          btnDisabledCondition={null}\n          btnCTA={props.setBoardToEmpty}\n        />\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    difficulty: state.sudoku.difficulty,\n    shouldShowIntroComponent: state.appUI.showIntroComponent,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    setDifficulty: (difficulty) => {\n      dispatch(sudokuActions.setDifficulty(difficulty));\n    },\n    setPuzzleAndSolvedPuzzle: () => {\n      dispatch(sudokuActions.setPuzzleAndSolvedPuzzle());\n      dispatch(sudokuActions.setGameMode(MODE_PLAY));\n      dispatch(appUIactions.toggleIntroComponent());\n    },\n    setBoardToEmpty: () => {\n      dispatch(sudokuActions.initUserInputSUdokuToSolve());\n      dispatch(sudokuActions.setGameMode(MODE_SOLVE));\n      dispatch(appUIactions.toggleIntroComponent());\n    },\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(IntroPage);\n\nIntroPage.propTypes = {\n  difficulty: PropTypes.string,\n  shouldShowIntroComponent: PropTypes.bool,\n\n  setDifficulty: PropTypes.func,\n  setPuzzleAndSolvedPuzzle: PropTypes.func,\n  setBoardToEmpty: PropTypes.func,\n};\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport * as classes from \"./Header.module.css\";\n\nimport * as appUIactions from \"../../store/actions/appUIactions\";\nimport {\n  MODE_PLAY,\n  EASY_PUZZLE,\n  MEDIUM_PUZZLE,\n  HARD_PUZZLE,\n} from \"../../helpers/helpers\";\n\nimport Button from \"../../UI/Button/Button\";\n\nimport PropTypes from \"prop-types\";\n\nconst Header = (props) => {\n  let difficulty = \"\";\n\n  if (props.difficulty === EASY_PUZZLE) {\n    difficulty = \"easy\";\n  } else if (props.difficulty === MEDIUM_PUZZLE) {\n    difficulty = \"semi-hard\";\n  } else if (props.difficulty === HARD_PUZZLE) {\n    difficulty = \"hard\";\n  }\n\n  return (\n    <div className={classes.Header}>\n      <div className={classes.Row}>\n        <h1 className={classes.GlowOnHover}>\n          Sudoku Game <span>♨︎</span>\n        </h1>\n        <Button clicked={props.toggleIntroComponent}>↩︎ Back to menu</Button>\n      </div>\n      <div className={classes.Row}>\n        <p className={classes.ModeDetails}>\n          {props.currentMode === MODE_PLAY\n            ? `Solve the ${difficulty} sudoku below!`\n            : \"Enter the sudoku I should solve!\"}\n        </p>\n        <Button inlineBtn clicked={props.toggleGameRules}>\n          {props.showGameRules ? \"Hide rules\" : \"Show rules\"}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    showGameRules: state.appUI.showGameRules,\n    currentMode: state.sudoku.currentMode,\n    difficulty: state.sudoku.difficulty,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    toggleIntroComponent: () => dispatch(appUIactions.toggleIntroComponent()),\n    toggleGameRules: () => dispatch(appUIactions.toggleGameRules()),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);\n\nHeader.propTypes = {\n  showGameRules: PropTypes.bool,\n  currentMode: PropTypes.string,\n  difficulty: PropTypes.string,\n\n  toggleIntroComponent: PropTypes.func,\n  toggleGameRules: PropTypes.func,\n};\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport * as classes from \"./Controls.module.css\";\nimport { MODE_PLAY, MODE_SOLVE } from \"../../helpers/helpers\";\n\nimport * as sudokuActions from \"../../store/actions/sudokuActions\";\nimport * as appUIActions from \"../../store/actions/appUIactions\";\nimport Button from \"../../UI/Button/Button\";\n\nimport PropTypes from \"prop-types\";\n\nconst Controls = (props) => {\n  let actionBasedOnMode;\n  let controls;\n  if (props.currentMode === MODE_PLAY) {\n    actionBasedOnMode = props.solvePuzzle;\n    controls = (\n      <>\n        <Button clicked={actionBasedOnMode} disabled={props.isSudokuSolved}>\n          Give up\n        </Button>\n        <Button clicked={props.setPuzzleAndSolvedPuzzle}>New game</Button>\n      </>\n    );\n  } else if (props.currentMode === MODE_SOLVE) {\n    actionBasedOnMode = props.solvePuzzleForUser;\n    controls = (\n      <>\n        <Button clicked={props.setBoardToEmpty}>Clear All</Button>\n        <Button clicked={actionBasedOnMode} disabled={props.isSudokuSolved}>\n          Solve\n        </Button>\n      </>\n    );\n  }\n\n  return <div className={classes.Controls}>{controls}</div>;\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    currentMode: state.sudoku.currentMode,\n    isThereSolvedState: state.sudoku.isUserInputtedPuzzleSolvable,\n    doesUserInputtedPuzzleHaveError:\n      state.sudoku.doesUserInputtedPuzzleHaveError,\n    isSudokuSolved: state.sudoku.isSudokuSolved,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    setPuzzleAndSolvedPuzzle: () => {\n      dispatch(appUIActions.clearActiveCell());\n      dispatch(sudokuActions.setPuzzleAndSolvedPuzzle());\n    },\n    setBoardToEmpty: () => {\n      dispatch(appUIActions.clearActiveCell());\n      dispatch(sudokuActions.initUserInputSUdokuToSolve());\n    },\n    solvePuzzle: () => {\n      dispatch(appUIActions.clearActiveCell());\n      dispatch(sudokuActions.solvePuzzle());\n    },\n    solvePuzzleForUser: () => {\n      dispatch(appUIActions.clearActiveCell());\n      dispatch(sudokuActions.solvePuzzleForUser());\n    },\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Controls);\n\nControls.propTypes = {\n  currentMode: PropTypes.string,\n  isThereSolvedState: PropTypes.bool,\n  doesUserInputtedPuzzleHaveError: PropTypes.bool,\n  isSudokuSolved: PropTypes.bool,\n\n  setPuzzleAndSolvedPuzzle: PropTypes.func,\n  setBoardToEmpty: PropTypes.func,\n  solvePuzzle: PropTypes.func,\n  solvePuzzleForUser: PropTypes.func,\n};\n","import React from \"react\";\nimport * as classes from \"./AuthorInfo.module.css\";\n\nconst AuthorInfo = () => {\n  return (\n    <div className={classes.AuthorInfo}>\n      <p className={classes.AuthorText}>\n        Built by{\" \"}\n        <a\n          className={classes.AuthorLink}\n          rel=\"noreferrer\"\n          target=\"_blank\"\n          href=\"https://tiskae.netlify.app\"\n        >\n          Ibrahim Adedokun\n        </a>\n      </p>\n    </div>\n  );\n};\nexport default AuthorInfo;\n","import \"./App.css\";\nimport Sudoku from \"./containers/Sudoku/Sudoku\";\nimport CellInputs from \"./containers/CellInputs/CellInputs\";\nimport { Provider } from \"react-redux\";\nimport { createStore, combineReducers } from \"redux\";\n\nimport appUIreducer from \"./store/reducers/appUIreducer\";\nimport sudokuReducer from \"./store/reducers/sudokuReducer\";\n\nimport Layout from \"./HOC/Layout/Layout\";\nimport SudokuBoardContainer from \"./HOC/SudokuBoardContainer/SudokuBoardContainer\";\nimport IntroPage from \"./containers/IntroPage/IntroPage\";\nimport Header from \"./containers/Header/Header\";\nimport Controls from \"./containers/Controls/Controls\";\nimport AuthorInfo from \"./components/AuthorInfo/AuthorInfo\";\n\nconst store = createStore(\n  combineReducers({\n    appUI: appUIreducer,\n    sudoku: sudokuReducer,\n  })\n);\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <Layout>\n        <IntroPage />\n        <Header />\n        <SudokuBoardContainer>\n          <Sudoku />\n          <CellInputs />\n        </SudokuBoardContainer>\n        <Controls />\n        <AuthorInfo />\n      </Layout>\n    </Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}